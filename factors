#!/usr/bin/python3

import sys
import time


def factorize(num):
    '''
    Takes a number as input and returns a tuple of two factors if the number is not a prime.
    Returns None if the number is prime.

    Args:
        num: Input integer to be factorized.

    Returns:
        A tuple of two factors if the number is not a prime.
        None if the number is prime.
    '''
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return (i, num // i)
    return None


if __name__ == "__main__":
    '''
    Reads the input file and factors the numbers within.
    '''

    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: factors <file>")
        sys.exit(1)  # Exit with an error code

    input_file = sys.argv[1]

    try:
        with open(input_file, 'r') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print("File not found")
        sys.exit(1)  # Exit with an error code

    start_time = time.time()

    factorizations = []  # Collect factorizations for sorting

    '''
    Loops over each line (which should contain one natural number per line),
    and calls factorize on each number.
    If factorize returns a tuple of factors,
    it appends the factorization to the list for sorting.
    '''
    for line in lines:
        num = int(line.strip())
        factors = factorize(num)
        if factors:
            factorizations.append((num, factors[0], factors[1]))

        '''
        If the elapsed time exceeds 5 seconds,
        the program exits with an error message.
        '''
        if time.time() - start_time > 5:
            print("Time limit exceeded")
            sys.exit(1)  # Exit with an error code

    # Sort factorizations by the original numbers
    sorted_factorizations = sorted(factorizations, key=lambda x: x[0])

    # Print sorted factorizations with the exact format
    for factorization in sorted_factorizations:
        print(f"{factorization[0]}={factorization[1]}*{factorization[2]}")

    sys.exit(0)  # Exit with success code
