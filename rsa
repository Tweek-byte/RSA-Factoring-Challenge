#!/usr/bin/python3

import sys
import random
import time


def is_prime(num, k=20):
    '''
    Check if a given number is prime using the Miller-Rabin primality test.

    :param num: The number to be tested for primality.
    :param k: Number of rounds for the Miller-Rabin test. Default is 20 for a reasonable level of accuracy.
    :return: True if the number is prime, False otherwise.
    '''

    # Base cases for 2 and 3
    if num == 2 or num == 3:
        return True
    # Check if number is less than 2 or even
    if num < 2 or num % 2 == 0:
        return False

    # Factorize num - 1 into d * 2^r
    d = num - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    # Perform Miller-Rabin test for k rounds
    for _ in range(k):
        a = random.randint(2, num - 2)
        x = pow(a, d, num)
        if x == 1 or x == num - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, num)
            if x == num - 1:
                break
        else:
            return False

    return True


if __name__ == "__main__":
    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python script.py <number>")
        sys.exit(1)  # Exit with an error code

    # Extract the number from command-line argument
    number_to_test = int(sys.argv[1])

    # Perform primality test
    if is_prime(number_to_test):
        print(f"{number_to_test} is a prime number.")
    else:
        print(f"{number_to_test} is not a prime number.")
